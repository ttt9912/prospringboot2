---------------------------------------------------------------------------------
destinations
---------------------------------------------------------------------------------
Clients can use the SEND or SUBSCRIBE commands to send or subscribe for messages,
along with a 'destination' header that describes what the message is about and
who should receive it.

This enables a simple publish-subscribe mechanism that you can use to send
messages through the broker to other connected clients or to send messages to
the server to request that some work be performed.

---------------------------------------------------------------------------------
destination Naming Convetions
---------------------------------------------------------------------------------
/topic/..   - implies publish-subscribe (one-to-many) message exchanges

/queue/     - implies point-to-point (one-to-one) message exchanges

For the built-in simple broker, the /topic and /queue prefixes do not have any
special meaning. They are merely a convention to differentiate between pub-sub
versus point-to-point messaging

---------------------------------------------------------------------------------
STOMP Commands
---------------------------------------------------------------------------------
Client
- SEND      - message to destination
- SUBSCRIBE - to destination

Server
- MESSAGE   - broadcast message to destination

---------------------------------------------------------------------------------
STOMP brokers
---------------------------------------------------------------------------------
to manage subscriptions and broadcast messages

- Spring in-memory
- RabbitMQ
- ActiveMQ

---------------------------------------------------------------------------------
Destination Controllers
---------------------------------------------------------------------------------
Messages can be routed to @Controller instances based on the STOMP
destination header

Versus handling raw WebSocket messages with a single WebSocketHandler for a
given connection

Message handling in @MessageMapping annotated methods

---------------------------------------------------------------------------------
Sending messages
---------------------------------------------------------------------------------
- @SendTo on @Controller methods
- SimpMessagingTemplate

---------------------------------------------------------------------------------
STOMP Hearbeats
---------------------------------------------------------------------------------
Configure Simple Broker with a TaskScheduler
https://docs.spring.io/spring-framework/docs/5.2.x/spring-framework-reference/web.html#websocket-stomp-handle-simple-broker

SockJS Hearbeats - are sent anyway if using SockJS

---------------------------------------------------------------------------------
Order of messages
---------------------------------------------------------------------------------
https://docs.spring.io/spring-framework/docs/5.2.x/spring-framework-reference/web.html#websocket-stomp-ordered-messages

order is not guaranteed, but can be enabled

Messages from the broker are published to the clientOutboundChannel, from where
they are written to WebSocket sessions. As the channel is backed by a
ThreadPoolExecutor, messages are processed in different threads, and the resulting
sequence received by the client may not match the exact order of publication.

---------------------------------------------------------------------------------
Application Events
---------------------------------------------------------------------------------
https://docs.spring.io/spring-framework/docs/5.2.x/spring-framework-reference/web.html#websocket-stomp-appplication-context-events

- BrokerAvailabilityEvent
- SessionConnectEvent
- SessionConnectedEvent
- SessionSubscribeEvent
- SessionUnsubscribeEvent
- SessionDisconnectEvent

---------------------------------------------------------------------------------
Performance
---------------------------------------------------------------------------------
https://docs.spring.io/spring-framework/docs/5.2.x/spring-framework-reference/web.html#websocket-stomp-configuration-performance

In a messaging application, messages are passed through channels for asynchronous
executions that are backed by thread pools.

The obvious place to start is to configure the thread pools that back the
clientInboundChannel and the clientOutboundChannel.
By default, both are configured at twice the number of available processors.

configure
- how long a send is allowed to take
- how much data can be buffered when sending messages to a client
- maximum allowed size for incoming STOMP messages

---------------------------------------------------------------------------------
Monitoring
---------------------------------------------------------------------------------
https://docs.spring.io/spring-framework/docs/5.2.x/spring-framework-reference/web.html#websocket-stomp-stats

@EnableWebSocketMessageBroker automatically gather statistics and collects it in
a bean of type WebSocketMessageBrokerStats

---------------------------------------------------------------------------------
Testing
---------------------------------------------------------------------------------
https://docs.spring.io/spring-framework/docs/5.2.x/spring-framework-reference/web.html#websocket-stomp-stats

- Controller tests
- E2E (running server with embedded stomp)